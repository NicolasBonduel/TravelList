{"version":3,"sources":["webpack://main/./src/hooks/persistedState.js","webpack://main/./src/components/TodoList/List/index.scss?09a5","webpack://main/./src/components/TodoList/List/index.jsx","webpack://main/./src/components/TodoList/index.scss?a9a6","webpack://main/./src/components/TodoList/index.jsx","webpack://main/./src/hooks/axios.js","webpack://main/./src/index.scss?b6a5","webpack://main/./src/index.jsx"],"names":["key","defaultValue","state","setState","useState","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","List","allCountries","searchValue","loading","selectedCountryCodes","setSelectedCountryCodes","usePersistedState","countries","setCountries","selectedCountries","filter","country","includes","alpha3Code","length","name","toUpperCase","startsWith","className","styles","Array","map","_el","index","id","join","onClick","handleSelectCountry","countryCode","countryCodes","c","tabIndex","type","htmlFor","defaultProps","propTypes","PropTypes","TodoList","useAxios","defaultSearchValue","setSearchValue","response","placeholder","value","onChange","event","target","autoFocus","axiosParams","setResponse","error","setError","setLoading","async","result","axios","params","data","err","fetchData"],"mappings":"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","file":"609.bundle.cee6b45c9eb53069de61.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction usePersistedState(key, defaultValue) {\n  const [state, setState] = useState(() => JSON.parse(localStorage.getItem(key)) || defaultValue);\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n}\n\nexport default usePersistedState;\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_1DR5hTvoQTIN9zUhZYa7cU\",\"todoListContainer\":\"_3nz_KllTHkcn7Q84rbnibk\",\"complete\":\"_3PUbhLlOHfjTH4PlERs5Pj\",\"selected\":\"_3p1_myTcTQQxXf280XJV8P\",\"label\":\"_31iMYVDyy-XE-zmIeFFgHk\",\"skeletonButton\":\"_3VArkizNLYVukpYhpncyCn\",\"skeletonLabel\":\"_1975fOA85nJehEpHM6gOIy\",\"shimmer\":\"_2EH3xRerEEJLfWBkVP4cvF\"};","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport usePersistedState from 'hooks/persistedState';\nimport styles from './index.scss';\n\nconst defaultSkeletonQty = 5;\n\nconst List = ({ allCountries, searchValue, loading }) => {\n  const [selectedCountryCodes, setSelectedCountryCodes] = usePersistedState(\n    'selectedCountryCodes',\n    []\n  );\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const selectedCountries = allCountries.filter((country) =>\n      selectedCountryCodes.includes(country.alpha3Code)\n    );\n    if (searchValue.length) {\n      setCountries([\n        ...selectedCountries,\n        ...allCountries.filter(\n          (country) =>\n            (country.name.toUpperCase().startsWith(searchValue.toUpperCase()) ||\n              country.alpha3Code.toUpperCase().startsWith(searchValue.toUpperCase())) &&\n            !selectedCountryCodes.includes(country.alpha3Code)\n        ),\n      ]);\n    } else {\n      setCountries(selectedCountries);\n    }\n  }, [allCountries, searchValue, selectedCountryCodes]);\n\n  const handleSelectCountry = (countryCode) => {\n    if (!selectedCountryCodes.includes(countryCode)) {\n      setSelectedCountryCodes((countryCodes) => [...countryCodes, countryCode]);\n    } else {\n      setSelectedCountryCodes((countryCodes) => countryCodes.filter((c) => c !== countryCode));\n    }\n  };\n\n  // We show the loading skeleton only when the user has already selected countries (localStorage),\n  // or started typing before the country list has been resolved\n  if (loading && !(selectedCountryCodes.length || searchValue.length)) {\n    return null;\n  }\n\n  // Optimize the DOM -- NOT necessary.\n  if (!loading && !countries.length) {\n    return null;\n  }\n\n  return (\n    <section className={styles.main}>\n      <ul className={styles.todoListContainer}>\n        {loading ? (\n          <div aria-busy data-testid=\"loading\">\n            {[...Array(selectedCountryCodes.length || defaultSkeletonQty)].map((_el, index) => (\n              // eslint-disable-next-line react/no-array-index-key -- All elements are the same\n              <li key={index}>\n                <div className={styles.skeletonButton} />\n                <div className={styles.label}>\n                  <div className={styles.skeletonLabel} />\n                </div>\n              </li>\n            ))}\n          </div>\n        ) : (\n          <>\n            {countries.map(({ name, alpha3Code }) => (\n              <li key={alpha3Code}>\n                <button\n                  id={alpha3Code}\n                  aria-label=\"Add or remove country from my list\"\n                  className={[\n                    styles.complete,\n                    selectedCountryCodes.includes(alpha3Code) ? styles.selected : null,\n                  ].join(' ')}\n                  onClick={() => handleSelectCountry(alpha3Code)}\n                  tabIndex={0}\n                  type=\"button\"\n                />\n                <label htmlFor={alpha3Code} className={styles.label}>\n                  {name}\n                </label>\n              </li>\n            ))}\n          </>\n        )}\n      </ul>\n    </section>\n  );\n};\n\nList.defaultProps = {\n  allCountries: [],\n};\n\nList.propTypes = {\n  allCountries: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      alpha3Code: PropTypes.string.isRequired,\n    })\n  ),\n  searchValue: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default List;\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_3dt1VrnK_Lk2Kl1zFVcrXC\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useAxiosDI from 'hooks/axios';\nimport List from './List';\nimport styles from './index.scss';\n\n// TODO: Move to .env file?\nconst countryApiUrl = 'https://restcountries.eu/rest/v2/all?fields=name;alpha3Code';\n\nconst TodoList = ({ useAxios, defaultSearchValue }) => {\n  const [searchValue, setSearchValue] = useState(defaultSearchValue);\n  const { response: countries, loading } = useAxios(countryApiUrl);\n\n  return (\n    <>\n      <input\n        className={styles.main}\n        placeholder=\"Country I want to visit\"\n        value={searchValue}\n        onChange={(event) => setSearchValue(event.target.value)}\n        type=\"search\"\n        // TODO: consider pros and cons with removing autofocus and improving a11y\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus\n      />\n      <List allCountries={countries} searchValue={searchValue} loading={loading} />\n    </>\n  );\n};\n\nTodoList.defaultProps = {\n  useAxios: useAxiosDI,\n  defaultSearchValue: '',\n};\n\nTodoList.propTypes = {\n  useAxios: PropTypes.func,\n  defaultSearchValue: PropTypes.string,\n};\n\nexport default TodoList;\n","import axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nexport default (axiosParams) => {\n  const [response, setResponse] = useState();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchData = async (params) => {\n    try {\n      const result = await axios.request(params);\n      setResponse(result.data);\n    } catch (err) {\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData(axiosParams);\n  }, [axiosParams]);\n\n  return { response, error, loading };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_3NjMb7zqncvKm9FHoYgc5C\",\"header\":\"z4QkGpZfp9N_1DzgYwioN\"};","import TodoList from 'components/TodoList';\nimport styles from './index.scss';\nimport './__general.scss';\n\nconst App = () => (\n  <section className={styles.main}>\n    <header className={styles.header}>\n      <h1>Travel-List</h1>\n    </header>\n    <TodoList />\n  </section>\n);\n\nexport default App;\n"],"sourceRoot":""}